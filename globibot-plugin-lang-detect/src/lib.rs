pub struct LanguageDetector {
    api_key: String,
}

#[derive(Debug, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LanguageDetection {
    pub language: String,
    pub is_reliable: bool,
    pub confidence: f64,
}

#[derive(Debug, thiserror::Error)]
pub enum DetectionError {
    #[error("Network error: {0}")]
    Reqwest(#[from] reqwest::Error),

    #[error("API did not return any detection")]
    NoDetections,
}

macro_rules! endpoint {
    ($path: literal) => {
        concat!("https://ws.detectlanguage.com/0.2", $path)
    };
}

impl LanguageDetector {
    pub fn new(api_key: impl Into<String>) -> Self {
        Self {
            api_key: api_key.into(),
        }
    }

    pub async fn detect_language(
        &self,
        sentence: &str,
    ) -> Result<LanguageDetection, DetectionError> {
        #[derive(serde::Serialize)]
        struct Request<'q> {
            q: &'q str,
        }

        #[derive(Debug, serde::Deserialize)]
        struct RawDetectionResponse {
            data: RawDetectionData,
        }

        #[derive(Debug, serde::Deserialize)]
        struct RawDetectionData {
            detections: Vec<LanguageDetection>,
        }

        let client = reqwest::Client::new();

        let response: RawDetectionResponse = client
            .post(endpoint!("/detect"))
            .bearer_auth(&self.api_key)
            .json(&Request { q: sentence })
            .send()
            .await?
            .json()
            .await?;

        let most_confident_detection = response
            .data
            .detections
            .into_iter()
            .max_by(|d1, d2| {
                let reliability_ord = d1.is_reliable.cmp(&d2.is_reliable);
                let confidence_ord = d1
                    .confidence
                    .partial_cmp(&d2.confidence)
                    .unwrap_or(std::cmp::Ordering::Equal);

                reliability_ord.then(confidence_ord)
            })
            .ok_or(DetectionError::NoDetections)?;

        Ok(most_confident_detection)
    }
}

pub fn flag_from_code(lang_code: &str) -> Option<&'static str> {
    let flag = match lang_code {
        // "aa" => "",
        // "ab" => "",
        "af" => "ðŸ‡¦ðŸ‡«",
        // "ak" => "",
        "am" => "ðŸ‡¦ðŸ‡²",
        "ar" => "ðŸ‡¦ðŸ‡·",
        "as" => "ðŸ‡¦ðŸ‡¸",
        // "ay" => "",
        "az" => "ðŸ‡¦ðŸ‡¿",
        "ba" => "ðŸ‡§ðŸ‡¦",
        "be" => "ðŸ‡§ðŸ‡ª",
        "bg" => "ðŸ‡§ðŸ‡¬",
        "bh" => "ðŸ‡§ðŸ‡­",
        "bi" => "ðŸ‡§ðŸ‡®",
        "bn" => "ðŸ‡§ðŸ‡³",
        "bo" => "ðŸ‡§ðŸ‡´",
        "br" => "ðŸ‡§ðŸ‡·",
        "bs" => "ðŸ‡§ðŸ‡¸",
        // "bug" => "",
        "ca" => "ðŸ‡¨ðŸ‡¦",
        // "ceb" => "",
        // "chr" => "",
        "co" => "ðŸ‡¨ðŸ‡´",
        // "crs" => "",
        // "cs" => "",
        "cy" => "ðŸ‡¨ðŸ‡¾",
        // "da" => "",
        "de" => "ðŸ‡©ðŸ‡ª",
        // "dv" => "",
        "dz" => "ðŸ‡©ðŸ‡¿",
        // "egy" => "",
        // "el" => "",
        // "en" => "",
        // "eo" => "",
        "es" => "ðŸ‡ªðŸ‡¸",
        "et" => "ðŸ‡ªðŸ‡¹",
        "eu" => "ðŸ‡ªðŸ‡º",
        // "fa" => "",
        "fi" => "ðŸ‡«ðŸ‡®",
        "fj" => "ðŸ‡«ðŸ‡¯",
        "fo" => "ðŸ‡«ðŸ‡´",
        "fr" => "ðŸ‡«ðŸ‡·",
        // "fy" => "",
        "ga" => "ðŸ‡¬ðŸ‡¦",
        "gd" => "ðŸ‡¬ðŸ‡©",
        "gl" => "ðŸ‡¬ðŸ‡±",
        "gn" => "ðŸ‡¬ðŸ‡³",
        // "got" => "",
        "gu" => "ðŸ‡¬ðŸ‡º",
        // "gv" => "",
        // "ha" => "",
        // "haw" => "",
        // "hi" => "",
        // "hmn" => "",
        "hr" => "ðŸ‡­ðŸ‡·",
        "ht" => "ðŸ‡­ðŸ‡¹",
        "hu" => "ðŸ‡­ðŸ‡º",
        // "hy" => "",
        // "ia" => "",
        "id" => "ðŸ‡®ðŸ‡©",
        "ie" => "ðŸ‡®ðŸ‡ª",
        // "ig" => "",
        // "ik" => "",
        "is" => "ðŸ‡®ðŸ‡¸",
        "it" => "ðŸ‡®ðŸ‡¹",
        // "iu" => "",
        // "iw" => "",
        // "ja" => "",
        // "jw" => "",
        // "ka" => "",
        // "kha" => "",
        // "kk" => "",
        // "kl" => "",
        "km" => "ðŸ‡°ðŸ‡²",
        "kn" => "ðŸ‡°ðŸ‡³",
        // "ko" => "",
        // "ks" => "",
        // "ku" => "",
        "ky" => "ðŸ‡°ðŸ‡¾",
        "la" => "ðŸ‡±ðŸ‡¦",
        "lb" => "ðŸ‡±ðŸ‡º",
        // "lg" => "",
        // "lif" => "",
        // "ln" => "",
        // "lo" => "",
        "lt" => "ðŸ‡±ðŸ‡¹",
        "lv" => "ðŸ‡±ðŸ‡»",
        // "mfe" => "",
        "mg" => "ðŸ‡²ðŸ‡¬",
        // "mi" => "",
        "mk" => "ðŸ‡²ðŸ‡°",
        "ml" => "ðŸ‡²ðŸ‡±",
        "mn" => "ðŸ‡²ðŸ‡³",
        "mr" => "ðŸ‡²ðŸ‡·",
        "ms" => "ðŸ‡²ðŸ‡¸",
        "mt" => "ðŸ‡²ðŸ‡¹",
        "my" => "ðŸ‡²ðŸ‡¾",
        "na" => "ðŸ‡³ðŸ‡¦",
        "ne" => "ðŸ‡³ðŸ‡ª",
        "nl" => "â™¿",
        "no" => "ðŸ‡³ðŸ‡´",
        "nr" => "ðŸ‡³ðŸ‡·",
        // "nso" => "",
        // "ny" => "",
        // "oc" => "",
        "om" => "ðŸ‡´ðŸ‡²",
        // "or" => "",
        "pa" => "ðŸ‡µðŸ‡¦",
        "pl" => "ðŸ‡µðŸ‡±",
        "ps" => "ðŸ‡µðŸ‡¸",
        "pt" => "ðŸ‡µðŸ‡¹",
        // "qu" => "",
        // "rm" => "",
        // "rn" => "",
        "ro" => "ðŸ‡·ðŸ‡´",
        "ru" => "ðŸ‡·ðŸ‡º",
        "rw" => "ðŸ‡·ðŸ‡¼",
        "sa" => "ðŸ‡¸ðŸ‡¦",
        // "sco" => "",
        "sd" => "ðŸ‡¸ðŸ‡©",
        "sg" => "ðŸ‡¸ðŸ‡¬",
        "si" => "ðŸ‡¸ðŸ‡®",
        "sk" => "ðŸ‡¸ðŸ‡°",
        "sl" => "ðŸ‡¸ðŸ‡±",
        "sm" => "ðŸ‡¸ðŸ‡²",
        "sn" => "ðŸ‡¸ðŸ‡³",
        "so" => "ðŸ‡¸ðŸ‡´",
        // "sq" => "",
        "sr" => "ðŸ‡¸ðŸ‡·",
        "ss" => "ðŸ‡¸ðŸ‡¸",
        "st" => "ðŸ‡¸ðŸ‡¹",
        // "su" => "",
        "sv" => "ðŸ‡¸ðŸ‡»",
        // "sw" => "",
        // "syr" => "",
        "ta" => "ðŸ‡¹ðŸ‡¦",
        // "te" => "",
        "tg" => "ðŸ‡¹ðŸ‡¬",
        "th" => "ðŸ‡¹ðŸ‡­",
        // "ti" => "",
        "tk" => "ðŸ‡¹ðŸ‡°",
        "tl" => "ðŸ‡¹ðŸ‡±",
        // "tlh" => "",
        "tn" => "ðŸ‡¹ðŸ‡³",
        "to" => "ðŸ‡¹ðŸ‡´",
        "tr" => "ðŸ‡¹ðŸ‡·",
        // "ts" => "",
        "tt" => "ðŸ‡¹ðŸ‡¹",
        "ug" => "ðŸ‡ºðŸ‡¬",
        // "uk" => "",
        // "ur" => "",
        "uz" => "ðŸ‡ºðŸ‡¿",
        "ve" => "ðŸ‡»ðŸ‡ª",
        "vi" => "ðŸ‡»ðŸ‡®",
        // "vo" => "",
        // "war" => "",
        // "wo" => "",
        // "xh" => "",
        // "yi" => "",
        // "yo" => "",
        "za" => "ðŸ‡¿ðŸ‡¦",
        "zh" => "ðŸ‡¨ðŸ‡³",
        "zh-Hant" => "ðŸ‡¨ðŸ‡³",
        // "zu" => "",
        unhandled => {
            eprintln!("unhandled country code: {}", unhandled);
            return None;
        }
    };

    Some(flag)
}
